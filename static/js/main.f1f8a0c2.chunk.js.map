{"version":3,"sources":["svg/wave.svg","svg/fruit.svg","img/mango.png","img/sliced.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","LogoStyle","styled","div","p","mleft","mright","scale","Logo","src","apple","Wave","img","Mango","Header","Content","Style","App","className","width","mango","wave","sliced","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,isICQ3C,IAAMC,EAAYC,IAAOC,IAAV,KAIE,SAAAC,GAAC,OAAIA,EAAEC,MAAQD,EAAEC,MAAQ,UACxB,SAAAD,GAAC,OAAIA,EAAEE,OAASF,EAAEE,OAAS,UAkCxB,SAAAF,GAAC,OAAIA,EAAEG,MAAQH,EAAEG,MAAQ,KAGxCC,EAAO,SAACJ,GACZ,OACE,kBAACH,EAAD,CAAWI,MAAOD,EAAEC,MAAOC,OAAQF,EAAEE,OAAQC,MAAOH,EAAEG,OACtD,yBAAKE,IAAKC,MACV,4BAAI,qCAAJ,aAKEC,EAAOT,IAAOU,IAAV,KAWJC,EAAQX,IAAOU,IAAV,KAQLE,EAASZ,IAAOC,IAAV,KAoFNY,EAAUb,IAAOC,IAAV,KA+DPa,EAAQd,IAAOC,IAAV,KAoCIc,MAhCf,WACE,OACE,kBAACD,EAAD,CAAOE,UAAU,OACf,kBAACJ,EAAD,CAAQI,UAAU,cAChB,yBAAKA,UAAU,aACf,wBAAIA,UAAU,OAAd,iCACA,kBAAC,EAAD,CAAMb,MAAM,OAAOC,OAAO,OAAOC,MAAO,EAAGY,MAAO,WAGlD,yBAAKD,UAAU,cACb,6BACF,kBAACL,EAAD,CAAOJ,IAAKW,OAEZ,iDAGF,kBAACT,EAAD,CAAMF,IAAKY,MACX,kBAACN,EAAD,KACE,yBAAKG,UAAU,YACb,kEAEF,yBAAKA,UAAU,YACb,yBAAKT,IAAKa,OAEZ,yBAAKJ,UAAU,cACb,6DClPUK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f1f8a0c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wave.624805a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/fruit.cea06265.svg\";","module.exports = __webpack_public_path__ + \"static/media/mango.0c02a7e0.png\";","module.exports = __webpack_public_path__ + \"static/media/sliced.23768521.jpg\";","import React from 'react';\nimport './App.css';\nimport styled from 'styled-components';\nimport wave from './svg/wave.svg';\nimport apple from './svg/fruit.svg';\nimport mango from './img/mango.png'\nimport sliced from './img/sliced.jpg'\n\nconst LogoStyle = styled.div`\n  display: flex; flex-direction: row;\n  width: fit-content;\n  height: 2rem;\n  margin-left: ${p => p.mleft ? p.mleft : '0rem'};\n  margin-right: ${p => p.mright ? p.mright : '0rem'};\n\n  img {\n    margin-top: 0.5rem;\n    height: 1.5rem;\n  }\n  h1 {\n    position: relative;\n    margin: 0; padding: 0; \n    line-height: 2.7rem;\n    font-weight: 400;\n    color: #86A939;\n    z-index: 55;\n    font-size: 1.5rem;\n    margin-left: -0.1rem;\n\n    span {\n      color: white;\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      margin-top: 0.7rem;\n      z-index: -1;\n      height: 1.4rem;\n      width: 2.1rem;\n      margin-left: 0.1rem;\n      background: rgb(255,206,38);\n      background: linear-gradient(90deg, rgba(255,206,38,1) 0%, rgba(134,169,57,1) 100%);\n    }\n  }\n\n\n  transform: scale(${p => p.scale ? p.scale : 1});\n`;\n\nconst Logo = (p) => {\n  return(\n    <LogoStyle mleft={p.mleft} mright={p.mright} scale={p.scale}>\n    <img src={apple}/>\n    <h1><span>Not</span>AnApple</h1>\n    </LogoStyle>\n  )\n}\n\nconst Wave = styled.img`\n  position: relative;\n  height: auto;\n  width: 100%;\n  margin-top: -99%;\n  pointer-events: none;\n  @media only screen and (max-width: 600px) {\n    display: none;\n  }\n`;\n\nconst Mango = styled.img`\n  position: relative;\n  height: 14rem;\n  width: auto;\n  margin: auto;\n  pointer-events: none;\n`;\n\nconst Header = styled.div`\n  height: 40vh;\n  width: 100%;\n  display: flex; flex-direction: row; flex-wrap: wrap;\n  background: linear-gradient(270.08deg, #FFCE26 0.02%, #FF2633 100.76%);\n  padding-bottom: 5vh;\n  user-select: none;\n  padding-top: 3rem;\n\n  .row {\n    display: flex; flex-wrap: wrap;\n    flex-direction: row;\n  }\n\n  .cta {\n    margin: auto;\n    width: 18rem;\n    font-weight: 800;\n    font-size: 2rem;\n    color: #FFCE26;\n    padding: 1rem;\n\n    @media only screen and (max-width: 600px) {\n      margin-bottom: 1rem;  \n    }\n  }\n\n  .column {\n    flex-direction: column;\n  }\n\n  .side {\n    flex: 1 300px; \n    width: 100%;\n    min-width: 20px;\n    max-width: 500px;\n    margin: auto;\n    flex-direction: column;\n    margin: 2rem auto 1rem;\n  }\n\n  .left {\n    margin-right: 12rem;\n\n    @media only screen and (max-width: 600px) {\n      margin-right: auto;\n    }\n  }\n\n  .right {\n    margin-left: -14rem;\n\n    @media only screen and (max-width: 600px) {\n      margin-left: auto;\n    }\n  }\n\n  button {\n    position: absolute;\n    width: 14rem;\n    height: 5rem;\n    border: none; \n    background-color: rgba(134, 169, 57, 0.8);\n    color: white;\n    font-size: 2rem;\n    margin-top: -9rem;\n    margin-left: -6.5rem;\n    cursor: pointer;\n    outline: none;\n    pointer-events: auto;\n\n    transition: all 0.5s;\n    &:hover {\n      transform: scale(1.1);\n      background-color: rgba(134, 169, 57, 1);\n      \n    }\n  }\n\n  @media only screen and (max-width: 600px) {\n    height: 100vh;\n  }\n`;\n\nconst Content = styled.div`\n  display: flex; flex-direction: row;\n  flex-wrap: wrap;\n  margin-top: 3rem;\n  color: white;\n  user-select: none;\n  margin-top: 0;\n\n  h1 {\n    font-size: 2.5rem;\n    font-weight: 400;\n    margin: auto;\n    margin-left: 1.4rem; margin-right: 1.4rem\n  }\n\n  .side {\n    height: 250px;\n    width: 250px;\n    margin: 2rem auto;\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.25);\n    display: flex;\n\n    transition: transform 0.3s;\n    &:hover {\n      transform: scale(1.1);\n    }\n\n    opacity: 0;\n    animation: fadein 3s forwards;\n  }\n\n  .one {\n    background: #FFCE26;\n  }\n\n  .two {\n    background: #86A939;\n\n    img {\n      width: 100%;\n      height: 70%;\n      margin: auto;\n      pointer-events: none;\n    }\n  }\n\n  .three {\n    font-family: Parisienne;\n    color: #86A939;\n    background: #FFFFFF;\n  }\n\n  @media only screen and (min-width: 1200px) {\n    margin-left: 15%; margin-right: 15%\n  }\n\n  @keyframes fadein {\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nconst Style = styled.div`\n\n`;\n\nfunction App() {\n  return (\n    <Style className=\"App\">\n      <Header className=\"App-header\">\n        <div className='side left'>\n        <h1 className='cta'>Mangos that wont let you down</h1>\n        <Logo mleft='auto' mright='auto' scale={2} width={'10rem'}/>\n        </div>\n\n        <div className='side right'>\n          <div>\n        <Mango src={mango}/>\n        </div>\n        <button>Order Today</button>\n        </div>\n      </Header>\n      <Wave src={wave} />\n      <Content>\n        <div className='side one'>\n          <h1>Organic, fresh, and not an apple.</h1>\n        </div>\n        <div className='side two'>\n          <img src={sliced}></img>\n        </div>\n        <div className='side three'>\n          <h1>Summertime, all the time.</h1>\n        </div>\n      </Content>\n    </Style>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}